@page "/fetchdata"

@using ToDoList.Data
@inject WeatherForecastService ForecastService
@inject HealthCareContext Context

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <DxDataGrid Data="@DataSource">

        <DxDataGridCommandColumn></DxDataGridCommandColumn>
        <DxDataGridDateEditColumn Field="@nameof(WeatherForecast.Date)" DisplayFormatString="D" EditFormatString="D">
        </DxDataGridDateEditColumn>
        <DxDataGridColumn Field="@nameof(WeatherForecast.Summary)" Caption="Summary"></DxDataGridColumn>
        <DxDataGridSpinEditColumn Field="@nameof(WeatherForecast.TemperatureC)" Caption="@("Temp. (\x2103)")"
                                  TextAlignment="DataGridTextAlign.Left"></DxDataGridSpinEditColumn>
        @*<DxDataGridComboBoxColumn Field="@nameof(WeatherForecast.WeatherType)" Caption="Cloudiness"
                                      DataAsync="@ForecastService.GetCloudinessAsync" TextAlignment="DataGridTextAlign.Left"></DxDataGridComboBoxColumn>
            <DxDataGridCheckBoxColumn Field="@nameof(WeatherForecast.Precipitates)"></DxDataGridCheckBoxColumn>*@
    </DxDataGrid>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    IEnumerable<WeatherForecast> DataSource;
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        DataSource = await ForecastService.GetForecastAsync(DateTime.Now);

        var count = Context.BagsKorisnik.Count();

    }
}
